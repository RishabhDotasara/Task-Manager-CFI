generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                String         @id @default(uuid())
  password              String
  employeeId            String         @unique
  username              String         @default("")
  permissions           String[]       @default([])
  email                 String         @default("test@gmail.com")
  comments              Comment[]
  tasks                 Task[]         @relation("assignedTasks")
  createdTasks          Task[]         @relation("createdTasks")
  teams                 Team[]         @relation("teamMembers")
  teamLeader            Team[]         @relation("teamLeader")
  clubLead              Club[]         @relation("clubLead")
  sentNotification      Notification[] @relation("SentNotifications")
  recievedNotifications Notification[] @relation("ReceivedNotifications")

  @@index([employeeId])
}

model Session {
  sessionId   String    @id @default(uuid())
  title       String
  description String
  date        DateTime
  startTime   String
  endTime     String
  location    String    @default("Google Meet")
  teamId      String
  team        Team      @relation("session-relation-team", fields: [teamId], references: [teamId], onDelete: Cascade)
  eventType   EventType
}

model Club {
  clubId    String @id @default(uuid())
  clubName  String
  teams     Team[] @relation("clubTeam")
  clubLeads User[] @relation("clubLead")
}

model Team {
  teamId   String    @id @default(uuid())
  name     String
  leaderId String?
  tasks    Task[]    @relation("teamTasks")
  members  User[]    @relation("teamMembers")
  sessions Session[] @relation("session-relation-team")
  leaders  User[]    @relation("teamLeader")
  clubId   String
  club     Club      @relation("clubTeam", fields: [clubId], references: [clubId], onDelete: Cascade)
}

model Task {
  taskId      String    @id @default(uuid())
  title       String
  description String
  createdById String
  deadline    DateTime
  status      Status
  assigneeId  String
  teamId      String?
  comments    Comment[]
  assignee    User      @relation("assignedTasks", fields: [assigneeId], references: [userId])
  user        User      @relation("createdTasks", fields: [createdById], references: [userId])
  team        Team?     @relation("teamTasks", fields: [teamId], references: [teamId])
}

model Comment {
  commentId String   @id @default(uuid())
  content   String
  taskId    String
  authorId  String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [userId])
  task      Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  sender    String
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  LEADER
  MEMBER
}

enum Status {
  PENDING
  INPROGRESS
  COMPLETED
}

enum EventType {
  ONLINE
  INPERSON
}

model Notification {
  notificationId Int              @id @default(autoincrement())
  type           NotificationType
  title          String
  message        String
  timestamp      DateTime         @default(now())
  read           Boolean          @default(false)
  actionUrl      String
  requestType    RequestType?
  toKeep         Boolean          @default(true)
  senderId       String
  sender         User             @relation("SentNotifications", fields: [senderId], references: [userId])
  receiverId     String
  receiver       User             @relation("ReceivedNotifications", fields: [receiverId], references: [userId])

  @@index([senderId])
  @@index([receiverId])
}

model ArchivedNotification {
  notificationId   Int              @id @default(autoincrement())
  type             NotificationType
  title            String
  message          String
  timestamp        DateTime         @default(now())
  read             Boolean          @default(false)
  actionUrl        String
  requestType      RequestType?
  toKeep           Boolean          @default(true)
  senderIdentity   String
  receiverIdentity String
}

enum RequestType {
  FEATURE
  BUG
}

enum NotificationType {
  COMMENT
  TASK
  TEAM
  EVENT
  UPDATE
  REQUEST
}
